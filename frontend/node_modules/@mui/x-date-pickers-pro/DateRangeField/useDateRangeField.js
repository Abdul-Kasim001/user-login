import _extends from "@babel/runtime/helpers/esm/extends";
import { useField, splitFormatIntoSections, addPositionPropertiesToSections, createDateStrFromSections, useUtils, useDefaultDates, parseNonNullablePickerDate } from '@mui/x-date-pickers/internals';
import { dateRangePickerValueManager } from '../DateRangePicker/shared';
import { splitDateRangeSections } from './DateRangeField.utils';
import { validateDateRange } from '../internal/hooks/validation/useDateRangeValidation';
export const dateRangeFieldValueManager = {
  getSectionsFromValue: (utils, prevSections, [start, end], format) => {
    const prevDateRangeSections = prevSections == null ? {
      startDate: null,
      endDate: null
    } : splitDateRangeSections(prevSections);

    const getSections = (newDate, prevDateSections) => {
      const shouldReUsePrevDateSections = !utils.isValid(newDate) && !!prevDateSections;

      if (shouldReUsePrevDateSections) {
        return prevDateSections;
      }

      return splitFormatIntoSections(utils, format, newDate);
    };

    const rawSectionsOfStartDate = getSections(start, prevDateRangeSections.startDate);
    const rawSectionsOfEndDate = getSections(end, prevDateRangeSections.endDate);
    const sectionsOfStartDate = rawSectionsOfStartDate.map((section, sectionIndex) => {
      if (sectionIndex === rawSectionsOfStartDate.length - 1) {
        return _extends({}, section, {
          dateName: 'start',
          separator: ' â€“ '
        });
      }

      return _extends({}, section, {
        dateName: 'start'
      });
    });
    const sectionsOfEndDate = rawSectionsOfEndDate.map(section => _extends({}, section, {
      dateName: 'end'
    }));
    return addPositionPropertiesToSections([...sectionsOfStartDate, ...sectionsOfEndDate]);
  },
  getValueStrFromSections: sections => {
    const dateRangeSections = splitDateRangeSections(sections);
    const startDateStr = createDateStrFromSections(dateRangeSections.startDate);
    const endDateStr = createDateStrFromSections(dateRangeSections.endDate);
    return `${startDateStr}${endDateStr}`;
  },
  getValueFromSections: (utils, prevSections, newSections, format) => {
    const removeLastSeparator = sections => sections.map((section, sectionIndex) => {
      if (sectionIndex === sections.length - 1) {
        return _extends({}, section, {
          separator: null
        });
      }

      return section;
    });

    const prevDateRangeSections = splitDateRangeSections(prevSections);
    const dateRangeSections = splitDateRangeSections(newSections);
    const startDateStr = createDateStrFromSections(removeLastSeparator(dateRangeSections.startDate));
    const endDateStr = createDateStrFromSections(dateRangeSections.endDate);
    const startDate = utils.parse(startDateStr, format);
    const endDate = utils.parse(endDateStr, format);
    const shouldPublish = startDateStr !== createDateStrFromSections(removeLastSeparator(prevDateRangeSections.startDate)) && utils.isValid(startDate) || endDateStr !== createDateStrFromSections(prevDateRangeSections.endDate) && utils.isValid(endDate);
    return {
      value: [startDate, endDate],
      shouldPublish
    };
  },
  getActiveDateFromActiveSection: (value, activeSection) => {
    const updateActiveDate = dateName => newActiveDate => {
      if (dateName === 'start') {
        return [newActiveDate, value[1]];
      }

      return [value[0], newActiveDate];
    };

    if (activeSection.dateName === 'start') {
      return {
        value: value[0],
        update: updateActiveDate('start')
      };
    }

    return {
      value: value[1],
      update: updateActiveDate('end')
    };
  },
  hasError: error => error[0] != null || error[1] != null
};
export const useDefaultizedDateRangeFieldProps = props => {
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  return _extends({
    disablePast: false,
    disableFuture: false
  }, props, {
    minDate: parseNonNullablePickerDate(utils, props.minDate, defaultDates.minDate),
    maxDate: parseNonNullablePickerDate(utils, props.maxDate, defaultDates.maxDate)
  });
};
export const useDateRangeField = inProps => {
  const props = useDefaultizedDateRangeFieldProps(inProps);
  return useField({
    props,
    valueManager: dateRangePickerValueManager,
    fieldValueManager: dateRangeFieldValueManager,
    validator: validateDateRange
  });
};